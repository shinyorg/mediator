{
  Generator: {},
  GeneratedSources: [
    {
      HintName: MediatorAttributes.g.cs,
      Source:
// <auto-generated>
// Code generated by Shiny Mediator Source Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable disable

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Shiny.Mediator.SourceGenerators", "5.0.0")]
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
internal sealed class MediatorSingletonAttribute : global::System.Attribute
{
}

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Shiny.Mediator.SourceGenerators", "5.0.0")]
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
internal sealed class MediatorScopedAttribute : global::System.Attribute
{
}
    },
    {
      HintName: TestAssembly_StreamRequestExecutor.g.cs,
      Source:
// <auto-generated>
// Code generated by Shiny Mediator Source Generator.
// </auto-generated>
#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;

namespace TestAssembly;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Shiny.Mediator.SourceGenerators", "5.0.0")]
internal class TestAssemblyStreamRequestExecutor : global::Shiny.Mediator.Infrastructure.StreamRequestExecutor
{
    public override global::System.Collections.Generic.IAsyncEnumerable<TResult> Request<TResult>(
        global::Shiny.Mediator.IMediatorContext context,
        global::Shiny.Mediator.IStreamRequest<TResult> request,
        global::System.Threading.CancellationToken cancellationToken
    )
    {
        if (request is global::TestApp.StreamRequest p0)
        {
            var handle = this.Execute<global::TestApp.StreamRequest, int>(context, p0, cancellationToken);
            return (global::System.Collections.Generic.IAsyncEnumerable<TResult>)handle;
        }

        throw new global::System.InvalidOperationException("Unknown request type");
    }

    public override bool CanRequest<TResult>(global::Shiny.Mediator.IStreamRequest<TResult> request)
    {
        if (request is global::TestApp.StreamRequest)
            return true;

        return false;
    }
}

    },
    {
      HintName: TestAssembly_Registry.g.cs,
      Source:
// <auto-generated>
// Code generated by Shiny Mediator Source Generator.
// </auto-generated>
#nullable disable

using Shiny.Mediator;
using Microsoft.Extensions.DependencyInjection;

namespace TestAssembly;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Shiny.Mediator.SourceGenerators", "5.0.0")]
internal static class __ShinyMediatorRegistry
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddMediatorRegistry(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddSingletonAsImplementedInterfaces<global::TestApp.StreamRequestHandler>();

        services.AddSingleton<global::Shiny.Mediator.Infrastructure.IStreamRequestExecutor, global::TestAssembly.TestAssemblyStreamRequestExecutor>();

        return services;
    }
}

    }
  ],
  Diagnostics: null
}