{
  Generator: {},
  GeneratedSources: [
    {
      HintName: SourceGenerateJsonConverterAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
internal sealed class SourceGenerateJsonConverterAttribute : Attribute;
    },
    {
      HintName: VehicleResultJsonConverter.g.cs,
      Source:
// <auto-generated/>
using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace <global namespace>;

public sealed class VehicleResultJsonConverter : JsonConverter<VehicleResult>
{
    public override void Write(Utf8JsonWriter writer, VehicleResult value, JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();
        writer.WritePropertyName("Id");
        writer.WriteNumberValue(value.Id);
        writer.WritePropertyName("Manufacturer");
        if (value.Manufacturer == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Manufacturer);
        writer.WritePropertyName("Model");
        if (value.Model == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Model);
        writer.WriteEndObject();
    }

    public override VehicleResult? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.Null)
            return null;

        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException("Expected StartObject token");

        int id = 0;
        string manufacturer = default;
        string model = default;

        while (reader.Read())
        {
            if (reader.TokenType == JsonTokenType.EndObject)
                break;

            if (reader.TokenType != JsonTokenType.PropertyName)
                throw new JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "Id":
                    if (reader.TokenType != JsonTokenType.Null)
                        id = reader.GetInt32();
                    break;
                case "Manufacturer":
                    if (reader.TokenType != JsonTokenType.Null)
                        manufacturer = reader.GetString();
                    break;
                case "Model":
                    if (reader.TokenType != JsonTokenType.Null)
                        model = reader.GetString();
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return new VehicleResult(id, manufacturer, model);
    }
}

    },
    {
      HintName: VehicleResult.JsonConverterAttribute.g.cs,
      Source:
// <auto-generated>
// This code was generated by Shiny.Json.SourceGenerator
// </auto-generated>
using System.Text.Json.Serialization;

namespace <global namespace>;

[global::System.Text.Json.Serialization.JsonConverter(typeof(VehicleResultJsonConverter))]
partial record VehicleResult
{
}

    }
  ],
  Diagnostics: null
}