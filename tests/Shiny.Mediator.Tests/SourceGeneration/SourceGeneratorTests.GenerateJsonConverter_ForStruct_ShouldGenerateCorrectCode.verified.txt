{
  Generator: {},
  GeneratedSources: [
    {
      HintName: SourceGenerateJsonConverterAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
internal sealed class SourceGenerateJsonConverterAttribute : Attribute;
    },
    {
      HintName: PointJsonConverter.g.cs,
      Source:
// <auto-generated/>
using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace <global namespace>;

public sealed class PointJsonConverter : JsonConverter<Point>
{
    public override void Write(Utf8JsonWriter writer, Point value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WritePropertyName("X");
        writer.WriteNumberValue(value.X);
        writer.WritePropertyName("Y");
        writer.WriteNumberValue(value.Y);
        writer.WritePropertyName("Label");
        if (value.Label == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Label);
        writer.WriteEndObject();
    }

    public override Point Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.Null)
            throw new JsonException("Cannot deserialize null to struct Point");

        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException("Expected StartObject token");

        var result = new Point();

        while (reader.Read())
        {
            if (reader.TokenType == JsonTokenType.EndObject)
                break;

            if (reader.TokenType != JsonTokenType.PropertyName)
                throw new JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "X":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.X = reader.GetDouble();
                    break;
                case "Y":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.Y = reader.GetDouble();
                    break;
                case "Label":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.Label = reader.GetString();
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return result;
    }
}

    },
    {
      HintName: Point.JsonConverterAttribute.g.cs,
      Source:
// <auto-generated>
// This code was generated by Shiny.Json.SourceGenerator
// </auto-generated>
using System.Text.Json.Serialization;

namespace <global namespace>;

[global::System.Text.Json.Serialization.JsonConverter(typeof(PointJsonConverter))]
partial struct Point
{
}

    }
  ],
  Diagnostics: null
}