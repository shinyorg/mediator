@page "/"
@using Sample.Blazor.Contracts
@using Sample.Blazor.Handlers
@using Shiny.Mediator
@using Shiny.Mediator.Blazor.Components
@inject IMediator Mediator
@implements IEventHandler<Sample.Blazor.Contracts.TheThing> 
@implements IConnectivityEventHandler

<PageTitle>Shiny Mediator Tests</PageTitle>
<MediatorInternetConnectivity BroadcastEvent="true">
    <b>You have no internet dude</b>
</MediatorInternetConnectivity>

<input type="text" @bind-value="text" />
<button @onclick="TestSend">Test Send</button>
<button @onclick="() => TestExceptionHandling(false)">No Exception Handling</button>
<button @onclick="() => TestExceptionHandling(true)">Test Exception Handling</button>

@if (resultText != null)
{
    <br />
    <text>Result from Mediator: @resultText</text>
}
@if (eventText != null)
{
    <br />
    <text>Event from Mediator: @eventText</text>
}
@if (offlineText != null)
{
    <br />
    <text>Value is from Offline: @offlineText</text>
}

@code {
    string? text;
    string? resultText;
    string? eventText;
    string? offlineText;

    void Clear()
    {
        eventText = null;
        resultText = null;
        offlineText = null;
    }
    
    async Task TestExceptionHandling(bool handle)
    {
        Clear();
        if (handle)
        {
            var context = await Mediator.Send(new SafeErrorCommand());
            resultText = $"Your handler crashed with '{context.Exception}', but Mediator UserErrorNotification caught it - you should also see an alert";
        }
        else
        {
            await Mediator.Send(new ErrorCommand());
            resultText = "You will never reach this line";
        }
    }

    async Task TestSend()
    {
        Clear();

        try
        {
            var result = await Mediator.Request(new DoThing(text ?? "No Text Sent"));
            resultText = $"Content: {result.Result} - Exception - {result.Context.Exception}";
            
            resultText = result.Result.ToString();
            var off = result.Context.Offline();
            if (off != null)
                offlineText = $"Data From: {off.Timestamp.ToLocalTime():h:mm:ss tt} - Key: {off.RequestKey}";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        text = null;
    }

    public Task Handle(TheThing @event, IMediatorContext context, CancellationToken cancellationToken)
    {
        Console.WriteLine("Received TheThing");
        eventText = @event.Text;
        return Task.CompletedTask;
    }

    
    public Task Handle(ConnectivityChanged @event, IMediatorContext context, CancellationToken cancellationToken)
    {
        Console.WriteLine("Internet Status Changed: " + @event.Connected);
        return Task.CompletedTask;
    }
}